"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[3598],{3905:function(e,n,t){t.d(n,{Zo:function(){return d},kt:function(){return m}});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=a.createContext({}),l=function(e){var n=a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},d=function(e){var n=l(e.components);return a.createElement(c.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=l(t),m=r,y=u["".concat(c,".").concat(m)]||u[m]||p[m]||o;return t?a.createElement(y,i(i({ref:n},d),{},{components:t})):a.createElement(y,i({ref:n},d))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=u;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var l=2;l<o;l++)i[l]=t[l];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},565:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return s},contentTitle:function(){return c},metadata:function(){return l},toc:function(){return d},default:function(){return u}});var a=t(7462),r=t(3366),o=(t(7294),t(3905)),i=["components"],s={},c="TSyringe",l={unversionedId:"general/tsyringe",id:"general/tsyringe",isDocsHomePage:!1,title:"TSyringe",description:"TSyringe is A lightweight dependency injection container for TypeScript/JavaScript for constructor injection.",source:"@site/docs/general/tsyringe.md",sourceDirName:"general",slug:"/general/tsyringe",permalink:"/docs/general/tsyringe",editUrl:"https://github.com/oceanroleplay/discord.ts/edit/main/docs/docs/general/tsyringe.md",tags:[],version:"current",frontMatter:{},sidebar:"docSidebar",previous:{title:"Sharding",permalink:"/docs/general/sharding"}},d=[{value:"Configuration",id:"configuration",children:[]},{value:"Usage",id:"usage",children:[]},{value:"Getting all @Discord classes",id:"getting-all-discord-classes",children:[]}],p={toc:d};function u(e){var n=e.components,t=(0,r.Z)(e,i);return(0,o.kt)("wrapper",(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"tsyringe"},"TSyringe"),(0,o.kt)("p",null,"TSyringe is A lightweight dependency injection container for TypeScript/JavaScript for constructor injection."),(0,o.kt)("p",null,"If you have a large codebase and are using Tsyringe to inject dependency, Discordx can now utilise the container\nto register each annotated ",(0,o.kt)("inlineCode",{parentName:"p"},"@Discord()")," class!"),(0,o.kt)("p",null,"In order to use your container, there is some small configuration to do in your code"),(0,o.kt)("h2",{id:"configuration"},"Configuration"),(0,o.kt)("p",null,"before you call your ",(0,o.kt)("inlineCode",{parentName:"p"},"client.login()")," method, you must tell Discordx to use your container for its internal Di solution,\nin order to do this, just add the following code anywhere before ",(0,o.kt)("inlineCode",{parentName:"p"},"client.login()"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'import { container } from "tsyringe";\n\nDIService.container = container;\n')),(0,o.kt)("p",null,"It is recommended to do this in your main class where you define your ",(0,o.kt)("inlineCode",{parentName:"p"},"new Client()")," code; for example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'import "reflect-metadata";\nimport { Intents } from "discord.js";\nimport { container } from "tsyringe";\nimport { Client } from "discordx";\n\nasync function start() {\n  DIService.container = container;\n  const client = new Client({\n    botId: "test",\n    intents: [Intents.FLAGS.GUILDS, Intents.FLAGS.GUILD_MESSAGES],\n    classes: [\n      // glob string to load the classes. If you compile your bot, the file extension will be .js\n      `${__dirname}/discords/*.{js,ts}`,\n    ],\n    silent: false,\n  });\n\n  await client.login("YOUR_TOKEN");\n}\n\nstart();\n')),(0,o.kt)("h2",{id:"usage"},"Usage"),(0,o.kt)("p",null,"Once you have told Discordx to use your container for DI, it will then register all of your defined ",(0,o.kt)("inlineCode",{parentName:"p"},"@Discord()")," classes\nwith the container as singletons. This is the same as declaring a class in tsyringe as ",(0,o.kt)("inlineCode",{parentName:"p"},"@singleton()")," with one SMALL\ncaveat; in tsyringe classes declared with ",(0,o.kt)("inlineCode",{parentName:"p"},"@singleton()")," are automatically ",(0,o.kt)("inlineCode",{parentName:"p"},"@injectable()")," but in Discordx you must add\nthis annotation too if you wish your classes to receive constructor injection."),(0,o.kt)("p",null,"For example, say you have a Database class you wish to inject into your declared ",(0,o.kt)("inlineCode",{parentName:"p"},"@Discord()")," class:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'@singleton()\nclass Database {\n  database: string;\n\n  constructor() {\n    console.log("I am database");\n    this.database = "connected";\n  }\n\n  query() {\n    return this.database;\n  }\n}\n')),(0,o.kt)("p",null,"In order to get this class injected into your ",(0,o.kt)("inlineCode",{parentName:"p"},"@Discord()")," instance at runtime, you must define your class as\nboth ",(0,o.kt)("inlineCode",{parentName:"p"},"@Discord()")," ",(0,o.kt)("strong",{parentName:"p"},"AND")," ",(0,o.kt)("inlineCode",{parentName:"p"},"@injectable()"),": (the order is important)"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'@Discord()\n@injectable()\nclass AppDiscord {\n  constructor(private _database: Database) {\n    console.log("constructed me as a singleton and injected _database");\n  }\n\n  @Slash("tsyringe")\n  private tsyringe(interaction: CommandInteraction): void {\n    if (DIService.container) {\n      const myClass = container.resolve(AppDiscord);\n      interaction.reply(\n        `${myClass._database.query()}, same class: ${myClass === this}`\n      );\n    } else {\n      interaction.reply("Not using tsyringe");\n    }\n  }\n}\n')),(0,o.kt)("p",null,"when running the above code, your ",(0,o.kt)("inlineCode",{parentName:"p"},"database")," will be injected into your ",(0,o.kt)("inlineCode",{parentName:"p"},"AppDiscord")," class and when you ask your\ncontainer for ",(0,o.kt)("inlineCode",{parentName:"p"},"AppDiscord")," you always receive the same instance of the class ",(0,o.kt)("inlineCode",{parentName:"p"},"container.resolve(AppDiscord);")),(0,o.kt)("p",null,"If you do not mark the class as ",(0,o.kt)("inlineCode",{parentName:"p"},"@injectable()")," you will get an error thrown from tsyringe telling you where is no\ntypeinfo for your class."),(0,o.kt)("h2",{id:"getting-all-discord-classes"},"Getting all @Discord classes"),(0,o.kt)("p",null,"If for some reason, you wish to get all instances of the ",(0,o.kt)("inlineCode",{parentName:"p"},"@Discord")," classes in your bot, then you can do so with the\nfollowing code example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'import { container, singleton } from "tsyringe";\n\nfunction getAllDiscordClasses(): any[] {\n  const appClasses = new Set<Record<string, any>>();\n  const dApplicationCommands = MetadataStorage.instance.allApplicationCommands;\n  const simpleCommands = MetadataStorage.instance.allSimpleCommands.map(\n    (value) => value.command\n  );\n  const merge: Method[] = [...dApplicationCommands, ...simpleCommands];\n  for (const applicationCommand of merge) {\n    const classRef = applicationCommand.classRef;\n    appClasses.add(classRef);\n  }\n  const commandClasses = [];\n  for (const classRef of appClasses) {\n    const instance = container.resolve(classRef as constructor<any>);\n    commandClasses.push(instance);\n  }\n  return commandClasses;\n}\n')),(0,o.kt)("p",null,"Because your container has been populated with all the ",(0,o.kt)("inlineCode",{parentName:"p"},"@Discord()")," instances on startup, you can use\nthe ",(0,o.kt)("inlineCode",{parentName:"p"},"MetadataStorage")," object to get all the class refs for all the components and use a unique set of said classes to\nresolve them from your container"),(0,o.kt)("p",null,"Unfortunately, we can not use ",(0,o.kt)("inlineCode",{parentName:"p"},"@injectall()")," with tokanised dependencies, this is due to the fact that ",(0,o.kt)("inlineCode",{parentName:"p"},"@Discord()")," is\nproxying your container and can not dynamically create a registry."))}u.isMDXComponent=!0}}]);